from turtle import Screen, Turtle
from paddle import Paddle
from ball import Ball
import time


screen= Screen()
screen.bgcolor("black")
screen.setup(width=800,height=600)
screen.title("arkanoid")
screen.tracer(0)

r_paddle= Paddle((350,0))
l_paddle=Paddle((-350,0))
ball=Ball()

screen.listen()
screen.onkey(r_paddle.go_up,"Up")
screen.onkey(r_paddle.go_down,"Down")
screen.onkey(l_paddle.go_up,"w")
screen.onkey(l_paddle.go_down,"s")



game_is_on=True

while game_is_on:
    time.sleep(0.1)
    screen.update()
    ball.move()

#detect the collision with the ball
    if ball.ycor() >280 or ball.ycor()<-280:
        #needs to bounce
        ball.bounce_y()
        
        
####


from turtle import Turtle

class Paddle(Turtle):

    def __init__(self, position):
        super().__init__()
        self.shape("square")
        self.color("white")
        self.shapesize(stretch_wid=5,stretch_len=1)
        self.penup()
        self.goto(position)

    def go_up(self):
        new_y= self.ycor() + 20
        self.goto(self.xcor(),new_y)

    def go_down(self):
        new_y= self.ycor() - 20
        self.goto(self.xcor(),new_y)


#####



from turtle import Turtle

class Ball(Turtle):
    
    def __init__(self):
        super(Ball, self).__init__()
        self.color("white")
        self.shape("circle")
        self.penup()
        self.x_move= 10
        self.y_move=10

    def move(self):
        new_x=self.xcor()+self.x_move
        new_y = self.ycor() + self.y_move
        self.goto(new_x,new_y)

    def bounce_y(self):
        self.y_move*=-1


    def bounce_x(self):
        self.x_move*=-1

##
    if ball.distance(r_paddle)<50 and ball.xcor() >330 or ball.distance(l_paddle)<50 and ball.xcor()<-330:
        print("touch")
        ball.bounce_x()

screen.exitonclick()
