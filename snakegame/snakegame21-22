from turtle import Screen
from snake import Snake
from food import Food
from scoreboard import Scoreboard
import time


screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("gra wonsz")
screen.tracer(0)

snake= Snake()
food= Food()
scoreboard= Scoreboard()

screen.listen()
screen.onkey(snake.up,"Up")
screen.onkey(snake.down,"Down")
screen.onkey(snake.left,"Left")
screen.onkey(snake.right,"Right")

# segment_1= Turtle("square")
# segment_1.color("white")
#
# segment_2= Turtle("square")
# segment_2.color("white")
# segment_2.goto(-20,0)
#
# segment_3= Turtle("square")
# segment_3.color("white")
# segment_3.goto(-40,0)

# alternatywnie możnaby for loop i taples  czyli
# starting_positions = [(0,0),(-20,0),(-40,0)]


screen.update()



game_is_on =True
while game_is_on:
    screen.update()
    time.sleep(0.2)
    # for seg in segments:
    #     seg.forward(20)

    snake.move()
  #detect collison with food
    if snake.head.distance(food) <15:
        food.refresh()
        snake.extend()
        scoreboard.increase_score()

 #detect collision with wall.
    if snake.head.xcor() >280 or snake.head.xcor()<-280 or snake.head.ycor()>280 or snake.head.ycor()< -280:
        game_is_on= False
        scoreboard.game_over()


#detect collision with tail
    for segment in snake.segments[1:]:
        if snake.head.distance(segment) <10:
            game_is_on=False
            scoreboard.game_over()
#if head collides with any of the tail segments
#trigger game over


screen.exitonclick()


#####Scoreboard

from turtle import Turtle
ALLIGNMENT="center"
FONT=("Courier", 22, "normal")
class Scoreboard(Turtle):
     
     def __init__(self):
         super(Scoreboard, self).__init__()
         self.score = 0
         self.color("white")
         self.penup()
         self.goto(x=0, y=270)
         self.hideturtle()
         self.update_scoreboard()
     def update_scoreboard(self):
         self.write(f"Hajskor: {self.score}",align=ALLIGNMENT, font=FONT)

     def game_over(self):
         self.goto(0,0 )
         self.write(f"Dobra robota! Gejm ołver z wynikiem: {self.score}", align=ALLIGNMENT, font=FONT)

     def increase_score(self):
        self.score+=1
        self.clear()
        self.update_scoreboard()
        
       ####snake

from turtle import Turtle
STARTING_POSITIONS = [(0,0),(-20,0),(-40,0)]
MOVE_DISTANCE =20

UP=90
DOWN= 270
LEFT=180
RIGHT=0

class Snake:

        def __init__(self):
            self.segments=[]
            self.create_snake()
            self.head = self.segments[0]

        def create_snake(self):
            for position in STARTING_POSITIONS:
                self.add_segment(position)

        def add_segment(self, position):
            new_segment = Turtle("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(position)
            self.segments.append(new_segment)

        def extend(self):
            self.add_segment(self.segments[-1].position())



        def move(self):
            for seg_num in range(len(self.segments) - 1, 0, -1):
                new_x = self.segments[seg_num - 1].xcor()
                new_y = self.segments[seg_num - 1].ycor()
                self.segments[seg_num].goto(new_x, new_y)
            self.head.forward(MOVE_DISTANCE)

        def up(self):
            if self.head.heading()!= DOWN:
                 self.head.setheading(UP)

        def down(self):
            if self.head.heading() != UP:
                self.head.setheading(DOWN)

        def left(self):
            if self.head.heading() != RIGHT:
                self.head.setheading(LEFT)

        def right(self):
            if self.head.heading() != LEFT:
                self.head.setheading(RIGHT)
                
                
                ###food
                
                from turtle import Turtle
import random


class Food(Turtle):

    def __init__(self):
        super().__init__()
        self.shape("circle")
        self.penup()
        self.shapesize(stretch_len=0.5, stretch_wid=0.5)
        self.color("blue")
        self.speed("fastest")
        self.refresh()

    def refresh(self):
        random_x = random.randint(-280, 280)
        random_y = random.randint(-280, 280)
        self.goto(random_x, random_y)
